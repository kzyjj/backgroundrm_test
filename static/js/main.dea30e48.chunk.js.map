{"version":3,"sources":["features/removebg/removebgSlice.js","components/RemoveBG/RemoveBG.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["removeBgSlice","createSlice","name","initialState","bgRemoved","reducers","setActionStatus","state","action","console","log","payload","actions","RemoveBG","status","useSelector","dispatch","useDispatch","b","useState","image","setImage","uploadImage","a","loadImage","maxWidth","maxHeight","canvas","toBlob","inputBlob","formData","FormData","append","fetch","method","headers","body","response","blob","outputBlob","URL","createObjectURL","document","getElementById","src","addEventListener","localStorage","setItem","createElement","event","MouseEvent","download","href","dispatchEvent","className","Row","type","onChange","e","i","target","files","accept","Button","onClick","size","variant","Col","id","alt","color","height","width","App","store","configureStore","reducer","statusReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAMMA,EAAgBC,YAAY,CAC9BC,KAAM,WACNC,aANiB,CACjBC,UAAW,MAMXC,SAAU,CACNC,gBAAiB,SAACC,EAAOC,GAErB,OADAC,QAAQC,IAAIF,GACL,2BAAKD,GAAZ,IAAmBH,UAAWI,EAAOG,cAKlCL,EAAoBN,EAAcY,QAAlCN,gBACAN,IAAf,Q,iFCTe,SAASa,IAGpB,IAAMC,EAASC,aAAY,SAACR,GAAD,OAAWA,EAAMO,OAAOV,aAC7CY,EAAWC,cAEbC,EAAG,KANwB,EAQLC,mBAAS,MARJ,mBAQxBC,EARwB,KAQjBC,EARiB,KAgBzBC,EAAW,uCAAG,sBAAAC,EAAA,6DAEhBP,EAASV,GAAgB,IAFT,SAIWkB,IAAUJ,EAAO,CAE5CK,SAAU,KACVC,UAAW,KACXC,QAAQ,IARQ,cAWHP,MAAMQ,OAAnB,uCAA0B,WAAgBC,GAAhB,qBAAAN,EAAA,6DACpBO,EAAW,IAAIC,UACZC,OAAO,aAAcH,GAFJ,SAIHI,MAAM,uCAAwC,CACjEC,OAAQ,OACRC,QAAS,CACT,YAAa,4CAEbC,KAAMN,IATgB,cAYH,OARjBO,EAJoB,QAYdvB,OACRE,EAASV,GAAgB,IAGzBU,EAASV,GAAgB,IAhBH,SAmBD+B,EAASC,OAnBR,OAmBpBC,EAnBoB,OAqB1BrB,EAAIsB,IAAIC,gBAAgBF,IAClBnB,EAAQsB,SAASC,eAAe,WAChCC,IAAM1B,EACZT,QAAQC,IAAIQ,GACFwB,SAASC,eAAe,OAC9BE,iBAAiB,SAAQ,WACzBC,aAAaC,QAAQ7B,EAAEE,GACvB,IAAIG,EAAEmB,SAASM,cAAc,KACzBC,EAAM,IAAIC,WAAW,SACzB3B,EAAE4B,SAAS,WACX5B,EAAE6B,KAAKlC,EACPK,EAAE8B,cAAcJ,MAhCM,4CAA1B,uDAXgB,2CAAH,qDAgDjB,OACI,sBAAKK,UAAU,OAAf,UACI,cAACC,EAAA,EAAD,UACI,qBAAKD,UAAU,iBAEnB,sBAAKA,UAAU,QAAf,UACI,uBAAOE,KAAK,OAAOC,SA5Db,SAACC,GACf,IAAMC,EAAID,EAAEE,OAAOC,MAAM,GACzBxC,EAASsC,GACTlD,QAAQC,IAAIiD,IAyDoCG,OAAO,eAC/C,cAACC,EAAA,EAAD,CAAQC,QAAS1C,EAAa2C,KAAK,KAAKC,QAAQ,OAAhD,yCAEJ,eAACC,EAAA,EAAD,WACKrD,EAAS,sBAAKwC,UAAU,QAAf,UACN,cAACC,EAAA,EAAD,UACI,qBAAKa,GAAG,SAASC,IAAI,GAAGzB,IAAK1B,MAEjC,8BACI,cAAC6C,EAAA,EAAD,CAAQK,GAAG,MAAMF,QAAQ,YAAzB,+BAEC,MACG,IAAXpD,EAAmB,cAAC,IAAD,CAAcsD,GAAG,UAAUZ,KAAK,OAAOc,MAAM,UAAUC,OAAQ,IAAKC,MAAO,MAAU,WCzE1GC,MAdf,WACE,OAEE,sBAAKnB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,aCNRoB,EAAQC,YAAe,CAClCC,QAAS,CACP9D,OAAQ+D,KCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJhC,SAASC,eAAe,SDqHpB,kBAAmB2C,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.dea30e48.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    bgRemoved: null\r\n}\r\n\r\nconst removeBgSlice = createSlice({\r\n    name: 'removeBg',\r\n    initialState,\r\n    reducers: {\r\n        setActionStatus: (state, action ) => {\r\n            console.log(action);\r\n            return { ...state, bgRemoved: action.payload };\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setActionStatus } = removeBgSlice.actions;\r\nexport default removeBgSlice.reducer;","import React, { useState } from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { setActionStatus } from '../../features/removebg/removebgSlice';\r\nimport loadImage from \"blueimp-load-image\";\r\nimport \"./RemoveBG.css\";\r\nimport ReactLoading from 'react-loading';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default function RemoveBG() {\r\n\r\n\r\n    const status = useSelector((state) => state.status.bgRemoved);\r\n    const dispatch = useDispatch();\r\n\r\n    let b =null\r\n\r\n    const [image, setImage] = useState(null);\r\n\r\n    const imgUpload = (e) => {\r\n        const i = e.target.files[0];\r\n        setImage(i);\r\n        console.log(i);\r\n    }\r\n\r\n    const uploadImage = async () => { \r\n\r\n        dispatch(setActionStatus(false));\r\n\r\n        const resizedImage = await loadImage(image, {\r\n        // resize before sending to PhotoRoom for performance\r\n        maxWidth: 1500,\r\n        maxHeight: 1500,\r\n        canvas: true\r\n        });\r\n\r\n        resizedImage.image.toBlob(async function (inputBlob) {\r\n        const formData = new FormData();\r\n        formData.append(\"image_file\", inputBlob);\r\n\r\n        const response = await fetch(\"https://sdk.photoroom.com/v1/segment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n            \"x-api-key\": \"f6a35b3f209ecdcd2f693a5c150347384053e580\"\r\n            },\r\n            body: formData\r\n        });\r\n\r\n        if(response.status === 200) {\r\n            dispatch(setActionStatus(true));\r\n        }\r\n        else{\r\n            dispatch(setActionStatus(false));\r\n        }\r\n        // https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api#example_fetching_images\r\n        const outputBlob = await response.blob();\r\n\r\n        b = URL.createObjectURL(outputBlob);\r\n        const image = document.getElementById(\"result\")\r\n        image.src = b;\r\n        console.log(b);\r\n        var btn = document.getElementById(\"btn\");\r\n        btn.addEventListener(\"click\",function() {\r\n            localStorage.setItem(b,image)\r\n            var a=document.createElement('a');\r\n            var event=new MouseEvent('click');\r\n            a.download='removebg';\r\n            a.href=b;\r\n            a.dispatchEvent(event);\r\n        })\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <Row>\r\n                <div className=\"App-header\"></div>\r\n            </Row>\r\n            <div className=\"input\">\r\n                <input type=\"file\" onChange={imgUpload} accept=\".jpg, .png\" />\r\n                <Button onClick={uploadImage} size=\"sm\" variant=\"link\">點擊去背</Button>\r\n            </div>\r\n            <Col>\r\n                {status ? <div className=\"image\">\r\n                    <Row>\r\n                        <img id=\"result\" alt=\"\" src={b} />\r\n                    </Row>\r\n                    <div>\r\n                        <Button id=\"btn\" variant=\"secondary\">下載</Button>\r\n                    </div>\r\n                 </div>: null}\r\n                {status === false ? <ReactLoading id=\"loading\" type=\"spin\" color=\"#000000\" height={100} width={100} /> : null} \r\n            </Col>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport RemoveBG from './components/RemoveBG/RemoveBG';\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <RemoveBG />\r\n      <div className=\"test\">\r\n      </div>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport statusReducer from '../features/removebg/removebgSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    status: statusReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}